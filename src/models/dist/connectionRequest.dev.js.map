{"version":3,"sources":["connectionRequest.js"],"names":["mongoose","require","connectionRequestSchema","Schema","fromUserId","type","Types","ObjectId","ref","toUserId","required","status","String","values","message","timestamps","index","pre","next","connectionRequest","equals","Error","ConnectionRequestModel","model","module","exports"],"mappings":";;;;;;AAAA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AAEA,IAAMC,uBAAuB,GAAG,IAAIF,QAAQ,CAACG,MAAb,CAC9B;AACEC,EAAAA,UAAU;AACRC,IAAAA,IAAI,EAAEL,QAAQ,CAACG,MAAT,CAAgBG,KAAhB,CAAsBC,QADpB;AAERC,IAAAA,GAAG,EAAE;AAFG,yCAGH,MAHG,4CAIE,IAJF,eADZ;AAOEC,EAAAA,QAAQ,EAAE;AACRJ,IAAAA,IAAI,EAAEL,QAAQ,CAACG,MAAT,CAAgBG,KAAhB,CAAsBC,QADpB;AAERC,IAAAA,GAAG,EAAE,MAFG;AAGRE,IAAAA,QAAQ,EAAE;AAHF,GAPZ;AAYEC,EAAAA,MAAM,EAAE;AACNN,IAAAA,IAAI,EAAEO,MADA;AAENF,IAAAA,QAAQ,EAAE,IAFJ;AAGN,YAAM;AACJG,MAAAA,MAAM,EAAE,CAAC,SAAD,EAAY,YAAZ,EAA0B,UAA1B,EAAsC,UAAtC,CADJ;AAEJC,MAAAA,OAAO;AAFH;AAHA;AAZV,CAD8B,EAsB9B;AAAEC,EAAAA,UAAU,EAAE;AAAd,CAtB8B,CAAhC,C,CAyBA;;AAEAb,uBAAuB,CAACc,KAAxB,CAA8B;AAAEZ,EAAAA,UAAU,EAAE,CAAd;AAAiBK,EAAAA,QAAQ,EAAE;AAA3B,CAA9B;AAEAP,uBAAuB,CAACe,GAAxB,CAA4B,MAA5B,EAAoC,UAAUC,IAAV,EAAgB;AAClD,MAAMC,iBAAiB,GAAG,IAA1B,CADkD,CAElD;;AACA,MAAIA,iBAAiB,CAACf,UAAlB,CAA6BgB,MAA7B,CAAoCD,iBAAiB,CAACV,QAAtD,CAAJ,EAAqE;AACnE,UAAM,IAAIY,KAAJ,CAAU,6CAAV,CAAN;AACD;;AACDH,EAAAA,IAAI;AACL,CAPD;AASA,IAAMI,sBAAsB,GAAG,IAAItB,QAAQ,CAACuB,KAAb,CAC7B,mBAD6B,EAE7BrB,uBAF6B,CAA/B;AAKAsB,MAAM,CAACC,OAAP,GAAiBH,sBAAjB","sourcesContent":["const mongoose = require(\"mongoose\");\r\n\r\nconst connectionRequestSchema = new mongoose.Schema(\r\n  {\r\n    fromUserId: {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      ref: \"User\", // refernce to the user collection\r\n      ref: \"User\",\r\n      required: true,\r\n    },\r\n    toUserId: {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      ref: \"User\",\r\n      required: true,\r\n    },\r\n    status: {\r\n      type: String,\r\n      required: true,\r\n      enum: {\r\n        values: [\"ignored\", \"interested\", \"accepted\", \"rejected\"],\r\n        message: `{VALUE} is incorrect status type`,\r\n      },\r\n    },\r\n  },\r\n  { timestamps: true }\r\n);\r\n\r\n// ConnectionRequest.find({fromUserId: 273478465864786587, toUserId: 273478465864786587})\r\n\r\nconnectionRequestSchema.index({ fromUserId: 1, toUserId: 1 });\r\n\r\nconnectionRequestSchema.pre(\"save\", function (next) {\r\n  const connectionRequest = this;\r\n  // Check if the fromUserId is same as toUserId\r\n  if (connectionRequest.fromUserId.equals(connectionRequest.toUserId)) {\r\n    throw new Error(\"Cannot send connection request to yourself!\");\r\n  }\r\n  next();\r\n});\r\n\r\nconst ConnectionRequestModel = new mongoose.model(\r\n  \"ConnectionRequest\",\r\n  connectionRequestSchema\r\n);\r\n\r\nmodule.exports = ConnectionRequestModel;"],"file":"connectionRequest.dev.js"}