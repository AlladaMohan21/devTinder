{"version":3,"sources":["user.js"],"names":["mongoose","require","validator","jwt","userSchema","Schema","firstName","type","required","minLength","trim","String","lastName","emailId","unique","value","lowercase","isEmail","Error","password","minlength","isStrongPassword","age","Number","min","gender","values","message","photoUrl","isURL","about","maxlength","timestamps","methods","getJWT","user","token","regeneratorRuntime","async","_context","prev","next","this","awrap","sign","_id","sent","abrupt","stop","validatePassword","passwordInputUser","passwordHash","isPasswordValid","_context2","bcrypt","compare","User","model"],"mappings":"aAAC,IAAMA,SAASC,QAAQ,YACjBC,UAAUD,QAAQ,aADlBD,OAAQC,QAAQ,UAGhBE,IAAMF,QAAQ,gBAIfG,WAAa,IAAIJ,SAASK,OAJ/B,CAMGC,UAAW,CAFTF,KAAAA,OAEFE,UAAW,EACTC,UADS,EAETC,UAAU,GACVC,MAAAA,GAEAC,SAAK,CANTH,KAAAI,OAQEC,MAAQ,EACNL,UAAMI,GAENH,QAAQ,CAXZD,KAAAI,OAaEE,SAAS,EAAA,EAAA,qBACLN,QAAMI,EACVH,WAAW,EACXM,SALU,SAKFC,GACRC,IAAAA,UAJSC,QAAAF,GAAA,MAAA,IAAAG,MAAA,gBAKMH,KAIdI,SAAA,CAtBHZ,KAAAI,OAwBEQ,SAAU,EAAA,EAAA,wBACRZ,UAAMI,CADE,EAAA,0CAEVH,SAJC,SAIOO,GACRK,IAAAA,UAAeC,iBAAAN,GAHL,MAAA,IAAAG,MAAA,0BAIKH,KAIdO,IAAA,CAhCHf,KAAAgB,OAkCKC,IAAE,IAEHA,OAAK,CApCTjB,KAAAI,OAsCEc,KAAQ,CACFC,OAAEf,CADA,OAAA,SAAA,UAENgB,QAAK,uCAUPC,SAAU,CAlDZrB,KAAAI,OAkDEiB,QAAU,sDACRrB,SADQ,SACFI,GACN,IAAAT,UAAS2B,MAAAd,GAFD,MAAA,IAAAG,MAAA,cAGOH,KAIde,MAAA,CAzDLvB,KAAAI,OA2DEmB,QAAO,uCACLvB,UADK,CAAA,IAAA,+CAGLwB,OAAAA,CA9DJxB,KAAA,CAAAI,UAiEIJ,CADMyB,YAAA,IAIRA,WAAUC,QAAEC,OAAA,WAAA,IAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OArEhBN,EAAAO,KAqEgBH,EAAAE,KAAA,EAAAJ,mBAAAM,MAIOxC,IAAIyC,KAAK,CAACC,IAAIV,EAAKU,KAAK,iBAAiB,CAF9DzC,UAAA,QAFc,KAAA,EAAA,OAINgC,EAJMG,EAAAO,KAAAP,EAAAQ,OAAA,SAEYX,GAFZ,KAAA,EAAA,IAAA,MAAA,OAAAG,EAAAS,SAAA,KAAAN,OAEYtC,WAAA6B,QAAAgB,iBAAA,SAAAC,GAAA,IAAAC,EAAAC,EAAA,OAAAf,mBAAAC,MAAA,SAAAe,GAAA,OAAA,OAAAA,EAAAb,KAAAa,EAAAZ,MAAA,KAAA,EAAA,OAClBN,EADkBO,KAAAvB,SAAAkC,EAAAZ,KAAA,EAAAJ,mBAAAM,MAAAW,OAAAC,QAAAL,EAAAC,IAAA,KAAA,EAAA,OAAAC,EAAAC,EAAAP,KAAAO,EAAAN,OAAA,SAEQK,GAFR,KAAA,EAAA,IAAA,MAAA,OAAAC,EAAAL,SAAA,KAAAN,OAgB3B,IAAMc,KAAMxD,SAASyD,MAAM,OAAOrD,YAdzBgC,OAAAA,QAFkBoB","file":"user.min.js","sourcesContent":[" const mongoose=require(\"mongoose\");\r\n const validator=require(\"validator\");\r\n const bcrypt=require(\"bcrypt\");\r\n const jwt = require(\"jsonwebtoken\");\r\n\r\n\r\n \r\nconst userSchema = new mongoose.Schema(\r\n  {\r\n    firstName: {\r\n      type: String,\r\n      required: true,\r\n      minLength: 4,\r\n      maxLength: 50,\r\n      trim:true\r\n    },\r\n    lastName: {\r\n      type: String,\r\n      trim:true,\r\n      required:true\r\n    },\r\n    emailId: {\r\n        type: String,\r\n    required: [true, \"Email is required\"],\r\n    unique: true,\r\n    lowercase: true,\r\n    validate(value){\r\n        if(!validator.isEmail(value)){\r\n            throw new Error(\"Invalid email\"+value);\r\n        }\r\n    }\r\n    },\r\n    password: {\r\n      type: String,\r\n    required: [true, \"Password is required\"],\r\n    minlength: [6, \"Password must be at least 6 characters\"],\r\n    validate(value){\r\n        if(!validator.isStrongPassword(value)){\r\n            throw new Error(\"Your password is weak..\"+value);\r\n        }\r\n    }\r\n    },\r\n    age: {\r\n      type: Number,\r\n      min: 18,\r\n    },\r\n    gender: {\r\n      type: String,\r\n      enum:{\r\n        values:[\"male\",\"female\",\"others\"],\r\n        message:`{VALUE is not a valid gender type}`,\r\n      }\r\n      // validate(value) {\r\n      //   if (![\"male\", \"female\", \"others\"].includes(value)) {\r\n      //     throw new Error(\"Gender data is not valid\");\r\n      //   }\r\n      // },\r\n    },\r\n    photoUrl: {\r\n      type: String,\r\n      default: \"https://geographyandyou.com/images/user-profile.png\",\r\n      validate(value){\r\n        if(!validator.isURL(value)){\r\n            throw new Error(\"Invalid url\"+value);\r\n        }\r\n      }\r\n    },\r\n    about: {\r\n      type: String,\r\n      default: \"This is a default about of the user!\",\r\n      maxlength: [200, \"About section cannot exceed 200 characters\"]\r\n    },\r\n    skills: {\r\n      type: [String],\r\n    }\r\n},{\r\n    timestamps: true,\r\n  });\r\n  userSchema.methods.getJWT=async function(){\r\n    const user=this;\r\n    const token =await jwt.sign({_id:user._id},\"DEV@Tinder$123\",{\r\n        expiresIn:\"1d\"});\r\n        return token;\r\n\r\n  }\r\n   userSchema.methods.validatePassword=async function(passwordInputUser){\r\n    const user=this;\r\n    const passwordHash=user.password;\r\n    const isPasswordValid=await bcrypt.compare(passwordInputUser,\r\n        passwordHash);\r\n        return isPasswordValid;\r\n   }\r\n\r\n\r\n const User= mongoose.model(\"User\",userSchema);\r\n\r\n module.exports=User;"]}