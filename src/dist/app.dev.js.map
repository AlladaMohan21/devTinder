{"version":3,"sources":["app.js"],"names":["express","require","connectDB","app","User","use","json","post","req","res","user","body","save","send","status","message","get","userEmail","emailId","console","log","findOne","find","users","userId","findByIdAndDelete","_id","patch","data","findByIdAndUpdate","returnDocument","runValidators","then","listen","err","error"],"mappings":"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","sourcesContent":["const express = require(\"express\");\r\nconst connectDB = require(\"./config/database\");\r\nconst app = express();\r\nconst User = require(\"./models/user\");\r\n\r\napp.use(express.json());\r\n\r\napp.post(\"/signup\", async (req, res) => {\r\n  //   Creating a new instance of the User model\r\n  const user = new User(req.body);\r\n\r\n  try {\r\n    await user.save();\r\n    res.send(\"User Added successfully!\");\r\n  } catch (err) {\r\n    res.status(400).send(\"Error saving the user:\" + err.message);\r\n  }\r\n});\r\n\r\n// Get user by email\r\napp.get(\"/user\", async (req, res) => {\r\n  const userEmail = req.body.emailId;\r\n\r\n  try {\r\n    console.log(userEmail);\r\n    const user = await User.findOne({ emailId: userEmail });\r\n    if (!user) {\r\n      res.status(404).send(\"User not found\");\r\n    } else {\r\n      res.send(user);\r\n    }\r\n\r\n    // const users = await User.find({ emailId: userEmail });\r\n    // if (users.length === 0) {\r\n    //   res.status(404).send(\"User not found\");\r\n    // } else {\r\n    //   res.send(users);\r\n    // }\r\n  } catch (err) {\r\n    res.status(400).send(\"Something went wrong \");\r\n  }\r\n});\r\n\r\n// Feed API - GET /feed - get all the users from the database\r\napp.get(\"/feed\", async (req, res) => {\r\n  try {\r\n    const users = await User.find({});\r\n    res.send(users);\r\n  } catch (err) {\r\n    res.status(400).send(\"Something went wrong \");\r\n  }\r\n});\r\n\r\n// Detele a user from the database\r\napp.delete(\"/user\", async (req, res) => {\r\n  const userId = req.body.userId;\r\n  try {\r\n    const user = await User.findByIdAndDelete({ _id: userId });\r\n    //const user = await User.findByIdAndDelete(userId);\r\n\r\n    res.send(\"User deleted successfully\");\r\n  } catch (err) {\r\n    res.status(400).send(\"Something went wrong \");\r\n  }\r\n});\r\n\r\n// Update data of the user\r\napp.patch(\"/user\", async (req, res) => {\r\n  const userId = req.body.userId;\r\n  const data = req.body;\r\n  try {\r\n    const user = await User.findByIdAndUpdate({ _id: userId }, data, {\r\n      returnDocument: \"after\",\r\n      runValidators: true,\r\n    });\r\n    console.log(user);\r\n    res.send(\"User updated successfully\");\r\n  } catch (err) {\r\n    res.status(400).send(\"Something went wrong \");\r\n    res.status(400).send(\"UPDATE FAILED:\" + err.message);\r\n  }\r\n});\r\n\r\nconnectDB()\r\n  .then(() => {\r\n    console.log(\"Database connection established...\");\r\n    app.listen(7777, () => {\r\n      console.log(\"Server is successfully listening on port 7777...\");\r\n    });\r\n  })\r\n  .catch((err) => {\r\n    console.error(\"Database cannot be connected!!\");\r\n  });"],"file":"app.dev.js"}