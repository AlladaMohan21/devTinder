{"version":3,"sources":["app.js"],"names":["express","require","connectDB","app","User","validationDatabase","bcrypt","use","json","post","req","res","body","firstName","lastName","emailId","password","findOne","existingUser","status","send","hash","validatePass","console","log","user","save","runValidators","code","message","Error","compare","isPasswordValid","error","get","userEmail","find","users","userId","findByIdAndDelete","_id","patch","params","data","ALLOWED_UPDATES","isUpdateAllowed","Object","keys","every","k","includes","skills","length","findByIdAndUpdate","returnDocument","then","listen","err"],"mappings":"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","sourcesContent":["const express = require(\"express\");\r\nconst connectDB = require(\"./config/database\");\r\nconst app = express();\r\nconst User = require(\"./models/user\");\r\nconst {validationDatabase}=require(\"./utils/validation\")\r\nconst bcrypt=require(\"bcrypt\");\r\n\r\napp.use(express.json());\r\n\r\napp.post(\"/signup\", async (req, res) => {\r\n//validate user \r\nvalidationDatabase(req);\r\n\r\n//encrypt password\r\nconst{firstName,lastName,emailId,password}=req.body;\r\n  const existingUser = await User.findOne({ emailId });\r\n    if (existingUser) {\r\n      return res.status(400).send(\"Email already exists\");\r\n    }\r\nconst validatePass=await bcrypt.hash(password,10);\r\nconsole.log(validatePass);\r\n  //   Creating a new instance of the User model\r\n  const user = new User({\r\n    firstName,\r\n    lastName,\r\n    password:validatePass,\r\n    emailId\r\n  });\r\n\r\n  try {\r\n    await user.save();\r\n    runValidators=true;\r\n    res.send(\"User Added successfully!\");\r\n  } catch (err) {\r\nif (err.code === 11000) {\r\n      return res.status(400).send(\"Email already exists\");\r\n    }\r\n    res.status(400).send(\"Error saving user: \" + err.message);\r\n  }\r\n});\r\n\r\napp.post(\"/login\",async (req,res)=>{\r\nconst {emailId,password}=req.body;\r\ntry{\r\nconst user=await User.findOne({emailId:emailId});\r\nif(!user){\r\n    throw new Error(\"Invalid Credentials\")\r\n}\r\n\r\nconst isPasswordValid=await bcrypt.compare(password,user.password);\r\nif(isPasswordValid){\r\n    res.send(\"Login Successfull..\")\r\n}else{\r\n    throw new error(\"Invalid Credentials\")\r\n}\r\n}catch(err){\r\n    res.status(400).send(\"invalid Credentials \"+ err.message);\r\n}\r\n\r\n})\r\n// Get user by email\r\napp.get(\"/user\", async (req, res) => {\r\n  const userEmail = req.body.emailId;\r\n\r\n  try {\r\n    console.log(userEmail);\r\n    const user = await User.findOne({ emailId: userEmail });\r\n    if (!user) {\r\n      res.status(404).send(\"User not found\");\r\n    } else {\r\n      res.send(user);\r\n    }\r\n\r\n    // const users = await User.find({ emailId: userEmail });\r\n    // if (users.length === 0) {\r\n    //   res.status(404).send(\"User not found\");\r\n    // } else {\r\n    //   res.send(users);\r\n    // }\r\n  } catch (err) {\r\n    res.status(400).send(\"Something went wrong \");\r\n  }\r\n});\r\n\r\n// Feed API - GET /feed - get all the users from the database\r\napp.get(\"/feed\", async (req, res) => {\r\n  try {\r\n    const users = await User.find({});\r\n    res.send(users);\r\n  } catch (err) {\r\n    res.status(400).send(\"Something went wrong \");\r\n  }\r\n});\r\n\r\n// Detele a user from the database\r\napp.delete(\"/user\", async (req, res) => {\r\n  const userId = req.body.userId;\r\n  try {\r\n    const user = await User.findByIdAndDelete({ _id: userId });\r\n    //const user = await User.findByIdAndDelete(userId);\r\n\r\n    res.send(\"User deleted successfully\");\r\n  } catch (err) {\r\n    res.status(400).send(\"Something went wrong \");\r\n  }\r\n});\r\n\r\n// Update data of the user\r\napp.patch(\"/user/:userId\", async (req, res) => {\r\n  const userId = req.params.userId;\r\n  const data = req.body;\r\n  try {\r\n    const ALLOWED_UPDATES=[\r\n        \"photoUrl\",\r\n        \"about\",\r\n        \"gender\",\r\n        \"skills\"\r\n    ]\r\n    const isUpdateAllowed=Object.keys(data).every((k)=> ALLOWED_UPDATES.includes(k)\r\n    );\r\n    if(!isUpdateAllowed){\r\n        throw new Error(\"Updates not allowed\");\r\n    }\r\n    if(data.skills.length>10){\r\n        throw new Error(\"skills cannot be more than 10\");\r\n    }\r\n    const user = await User.findByIdAndUpdate({ _id: userId }, data, {\r\n      returnDocument: \"after\",\r\n      runValidators: true,\r\n    });\r\n    console.log(user);\r\n    res.send(\"User updated successfully\");\r\n  } catch (err) {\r\n   \r\n    res.status(400).send(\"UPDATE FAILED:\" + err.message);\r\n  }\r\n});\r\n\r\nconnectDB()\r\n  .then(() => {\r\n    console.log(\"Database connection established...\");\r\n    app.listen(7777, () => {\r\n      console.log(\"Server is successfully listening on port 7777...\");\r\n    });\r\n  })\r\n  .catch((err) => {\r\n    console.error(\"Database cannot be connected!!\");\r\n  });"],"file":"app.dev.js"}