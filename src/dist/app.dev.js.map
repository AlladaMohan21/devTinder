{"version":3,"sources":["app.js"],"names":["express","require","connectDB","app","User","use","json","post","req","res","user","body","save","runValidators","send","code","status","message","get","userEmail","emailId","console","log","findOne","find","users","userId","findByIdAndDelete","_id","patch","params","data","ALLOWED_UPDATES","isUpdateAllowed","Object","keys","every","k","includes","Error","skills","length","findByIdAndUpdate","returnDocument","then","listen","err","error"],"mappings":"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","sourcesContent":["const express = require(\"express\");\r\nconst connectDB = require(\"./config/database\");\r\nconst app = express();\r\nconst User = require(\"./models/user\");\r\n\r\napp.use(express.json());\r\n\r\napp.post(\"/signup\", async (req, res) => {\r\n  //   Creating a new instance of the User model\r\n  const user = new User(req.body);\r\n\r\n  try {\r\n    await user.save();\r\n    runValidators=true;\r\n    res.send(\"User Added successfully!\");\r\n  } catch (err) {\r\nif (err.code === 11000) {\r\n      return res.status(400).send(\"Email already exists\");\r\n    }\r\n    res.status(400).send(\"Error saving user: \" + err.message);\r\n  }\r\n});\r\n\r\n// Get user by email\r\napp.get(\"/user\", async (req, res) => {\r\n  const userEmail = req.body.emailId;\r\n\r\n  try {\r\n    console.log(userEmail);\r\n    const user = await User.findOne({ emailId: userEmail });\r\n    if (!user) {\r\n      res.status(404).send(\"User not found\");\r\n    } else {\r\n      res.send(user);\r\n    }\r\n\r\n    // const users = await User.find({ emailId: userEmail });\r\n    // if (users.length === 0) {\r\n    //   res.status(404).send(\"User not found\");\r\n    // } else {\r\n    //   res.send(users);\r\n    // }\r\n  } catch (err) {\r\n    res.status(400).send(\"Something went wrong \");\r\n  }\r\n});\r\n\r\n// Feed API - GET /feed - get all the users from the database\r\napp.get(\"/feed\", async (req, res) => {\r\n  try {\r\n    const users = await User.find({});\r\n    res.send(users);\r\n  } catch (err) {\r\n    res.status(400).send(\"Something went wrong \");\r\n  }\r\n});\r\n\r\n// Detele a user from the database\r\napp.delete(\"/user\", async (req, res) => {\r\n  const userId = req.body.userId;\r\n  try {\r\n    const user = await User.findByIdAndDelete({ _id: userId });\r\n    //const user = await User.findByIdAndDelete(userId);\r\n\r\n    res.send(\"User deleted successfully\");\r\n  } catch (err) {\r\n    res.status(400).send(\"Something went wrong \");\r\n  }\r\n});\r\n\r\n// Update data of the user\r\napp.patch(\"/user/:userId\", async (req, res) => {\r\n  const userId = req.params.userId;\r\n  const data = req.body;\r\n  try {\r\n    const ALLOWED_UPDATES=[\r\n        \"photoUrl\",\r\n        \"about\",\r\n        \"gender\",\r\n        \"skills\"\r\n    ]\r\n    const isUpdateAllowed=Object.keys(data).every((k)=> ALLOWED_UPDATES.includes(k)\r\n    );\r\n    if(!isUpdateAllowed){\r\n        throw new Error(\"Updates not allowed\");\r\n    }\r\n    if(data.skills.length>10){\r\n        throw new Error(\"skills cannot be more than 10\");\r\n    }\r\n    const user = await User.findByIdAndUpdate({ _id: userId }, data, {\r\n      returnDocument: \"after\",\r\n      runValidators: true,\r\n    });\r\n    console.log(user);\r\n    res.send(\"User updated successfully\");\r\n  } catch (err) {\r\n   \r\n    res.status(400).send(\"UPDATE FAILED:\" + err.message);\r\n  }\r\n});\r\n\r\nconnectDB()\r\n  .then(() => {\r\n    console.log(\"Database connection established...\");\r\n    app.listen(7777, () => {\r\n      console.log(\"Server is successfully listening on port 7777...\");\r\n    });\r\n  })\r\n  .catch((err) => {\r\n    console.error(\"Database cannot be connected!!\");\r\n  });"],"file":"app.dev.js"}