{"version":3,"sources":["app.js"],"names":["express","require","connectDB","app","User","validationDatabase","bcrypt","cookieParser","jwt","userAuth","use","json","post","req","res","body","firstName","lastName","emailId","password","findOne","existingUser","status","send","hash","validatePass","console","log","user","save","runValidators","code","message","Error","validatePassword","isPasswordValid","getJWT","token","cookie","expires","Date","now","error","get","userId","err","then","listen"],"mappings":"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","sourcesContent":["const express = require(\"express\");\r\nconst connectDB = require(\"./config/database\");\r\nconst app = express();\r\nconst User = require(\"./models/user\");\r\nconst {validationDatabase}=require(\"./utils/validation\")\r\nconst bcrypt=require(\"bcrypt\");\r\nconst cookieParser=require(\"cookie-parser\");\r\nconst jwt=require(\"jsonwebtoken\");\r\nconst{userAuth}=require(\"./middlewares/auth\")\r\n\r\napp.use(express.json());\r\napp.use(cookieParser())\r\n\r\napp.post(\"/signup\", async (req, res) => {\r\n//validate user \r\nvalidationDatabase(req);\r\n\r\n//encrypt password\r\nconst{firstName,lastName,emailId,password}=req.body;\r\n  const existingUser = await User.findOne({ emailId });\r\n    if (existingUser) {\r\n      return res.status(400).send(\"Email already exists\");\r\n    }\r\nconst validatePass=await bcrypt.hash(password,10);\r\nconsole.log(validatePass);\r\n  //   Creating a new instance of the User model\r\n  const user = new User({\r\n    firstName,\r\n    lastName,\r\n    password:validatePass,\r\n    emailId\r\n  });\r\n\r\n  try {\r\n    await user.save();\r\n    runValidators=true;\r\n    res.send(\"User Added successfully!\");\r\n  } catch (err) {\r\nif (err.code === 11000) {\r\n      return res.status(400).send(\"Email already exists\");\r\n    }\r\n    res.status(400).send(\"Error saving user: \" + err.message);\r\n  }\r\n});\r\n\r\napp.post(\"/login\",async (req,res)=>{\r\nconst {emailId,password}=req.body;\r\ntry{\r\nconst user=await User.findOne({emailId:emailId});\r\nif(!user){\r\n    throw new Error(\"Invalid Credentials\")\r\n}\r\n\r\nconst isPasswordValid=await user.validatePassword(password);\r\nif(isPasswordValid){\r\n    //create a jwt token\r\n    const token =await user.getJWT();\r\n    //add token to the cookie and send back the response\r\n    res.cookie(\"token\",token,{expires:new Date(Date.now()+ 8* 3600000)});\r\n    res.send(\"Login Successfull..\")\r\n}else{\r\n    throw new error(\"Invalid Credentials\")\r\n}\r\n}catch(err){\r\n    res.status(400).send(\"invalid Credentials \"+ err.message);\r\n}\r\n\r\n})\r\n\r\napp.get(\"/profile\",userAuth,async (req,res)=>{\r\ntry{\r\nconst userId=req.user; \r\nres.send(userId);\r\n}catch (err) {\r\n    res.status(400).send(\"Something went wrong \");\r\n  }\r\n})\r\napp.post(\"/sendConnectionRequest\",userAuth,async (req,res)=>{\r\n    const user=req.user;\r\n    res.send(\"connection Request Sent!\")\r\n})\r\n\r\nconnectDB()\r\n  .then(() => {\r\n    console.log(\"Database connection established...\");\r\n    app.listen(7777, () => {\r\n      console.log(\"Server is successfully listening on port 7777...\");\r\n    });\r\n  })\r\n  .catch((err) => {\r\n    console.error(\"Database cannot be connected!!\");\r\n  });"],"file":"app.dev.js"}