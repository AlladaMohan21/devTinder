{"version":3,"sources":["app.js"],"names":["express","require","connectDB","User","bcrypt","app","use","json","post","req","res","_req$body","firstName","lastName","emailId","password","validatePass","user","regeneratorRuntime","async","_context","prev","next","validationDatabase","body","awrap","findOne","sent","abrupt","status","send","hash","console","log","save","runValidators","t0","code","existingUser","message","stop","_req$body2","_context2","Error","compare","userEmail","get","users","_context4","find","userId","_context5","patch","data","ALLOWED_UPDATES","_context6","isPasswordValid","keys","every","k","includes","length","findByIdAndUpdate","_id","returnDocument","error","then","listen","err"],"mappings":"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","file":"app.min.js","sourcesContent":["const express = require(\"express\");\r\nconst connectDB = require(\"./config/database\");\r\nconst app = express();\r\nconst User = require(\"./models/user\");\r\nconst {validationDatabase}=require(\"./utils/validation\")\r\nconst bcrypt=require(\"bcrypt\");\r\n\r\napp.use(express.json());\r\n\r\napp.post(\"/signup\", async (req, res) => {\r\n//validate user \r\nvalidationDatabase(req);\r\n\r\n//encrypt password\r\nconst{firstName,lastName,emailId,password}=req.body;\r\n  const existingUser = await User.findOne({ emailId });\r\n    if (existingUser) {\r\n      return res.status(400).send(\"Email already exists\");\r\n    }\r\nconst validatePass=await bcrypt.hash(password,10);\r\nconsole.log(validatePass);\r\n  //   Creating a new instance of the User model\r\n  const user = new User({\r\n    firstName,\r\n    lastName,\r\n    password:validatePass,\r\n    emailId\r\n  });\r\n\r\n  try {\r\n    await user.save();\r\n    runValidators=true;\r\n    res.send(\"User Added successfully!\");\r\n  } catch (err) {\r\nif (err.code === 11000) {\r\n      return res.status(400).send(\"Email already exists\");\r\n    }\r\n    res.status(400).send(\"Error saving user: \" + err.message);\r\n  }\r\n});\r\n\r\napp.post(\"/login\",async (req,res)=>{\r\nconst {emailId,password}=req.body;\r\ntry{\r\nconst user=await User.findOne({emailId:emailId});\r\nif(!user){\r\n    throw new Error(\"Invalid Credentials\")\r\n}\r\n\r\nconst isPasswordValid=await bcrypt.compare(password,user.password);\r\nif(isPasswordValid){\r\n    res.send(\"Login Successfull..\")\r\n}else{\r\n    throw new error(\"Invalid Credentials\")\r\n}\r\n}catch(err){\r\n    res.status(400).send(\"invalid Credentials \"+ err.message);\r\n}\r\n\r\n})\r\n// Get user by email\r\napp.get(\"/user\", async (req, res) => {\r\n  const userEmail = req.body.emailId;\r\n\r\n  try {\r\n    console.log(userEmail);\r\n    const user = await User.findOne({ emailId: userEmail });\r\n    if (!user) {\r\n      res.status(404).send(\"User not found\");\r\n    } else {\r\n      res.send(user);\r\n    }\r\n\r\n    // const users = await User.find({ emailId: userEmail });\r\n    // if (users.length === 0) {\r\n    //   res.status(404).send(\"User not found\");\r\n    // } else {\r\n    //   res.send(users);\r\n    // }\r\n  } catch (err) {\r\n    res.status(400).send(\"Something went wrong \");\r\n  }\r\n});\r\n\r\n// Feed API - GET /feed - get all the users from the database\r\napp.get(\"/feed\", async (req, res) => {\r\n  try {\r\n    const users = await User.find({});\r\n    res.send(users);\r\n  } catch (err) {\r\n    res.status(400).send(\"Something went wrong \");\r\n  }\r\n});\r\n\r\n// Detele a user from the database\r\napp.delete(\"/user\", async (req, res) => {\r\n  const userId = req.body.userId;\r\n  try {\r\n    const user = await User.findByIdAndDelete({ _id: userId });\r\n    //const user = await User.findByIdAndDelete(userId);\r\n\r\n    res.send(\"User deleted successfully\");\r\n  } catch (err) {\r\n    res.status(400).send(\"Something went wrong \");\r\n  }\r\n});\r\n\r\n// Update data of the user\r\napp.patch(\"/user/:userId\", async (req, res) => {\r\n  const userId = req.params.userId;\r\n  const data = req.body;\r\n  try {\r\n    const ALLOWED_UPDATES=[\r\n        \"photoUrl\",\r\n        \"about\",\r\n        \"gender\",\r\n        \"skills\"\r\n    ]\r\n    const isUpdateAllowed=Object.keys(data).every((k)=> ALLOWED_UPDATES.includes(k)\r\n    );\r\n    if(!isUpdateAllowed){\r\n        throw new Error(\"Updates not allowed\");\r\n    }\r\n    if(data.skills.length>10){\r\n        throw new Error(\"skills cannot be more than 10\");\r\n    }\r\n    const user = await User.findByIdAndUpdate({ _id: userId }, data, {\r\n      returnDocument: \"after\",\r\n      runValidators: true,\r\n    });\r\n    console.log(user);\r\n    res.send(\"User updated successfully\");\r\n  } catch (err) {\r\n   \r\n    res.status(400).send(\"UPDATE FAILED:\" + err.message);\r\n  }\r\n});\r\n\r\nconnectDB()\r\n  .then(() => {\r\n    console.log(\"Database connection established...\");\r\n    app.listen(7777, () => {\r\n      console.log(\"Server is successfully listening on port 7777...\");\r\n    });\r\n  })\r\n  .catch((err) => {\r\n    console.error(\"Database cannot be connected!!\");\r\n  });"]}