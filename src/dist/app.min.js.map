{"version":3,"sources":["app.js"],"names":["express","require","connectDB","User","bcrypt","app","jwt","use","validationDatabase","req","res","_req$body","firstName","lastName","emailId","password","validatePass","user","regeneratorRuntime","async","_context","prev","next","body","awrap","findOne","sent","abrupt","status","send","hash","log","save","runValidators","t0","code","existingUser","message","stop","post","_req$body2","token","_context2","Error","validatePassword","console","expires","Date","now","userId","_context3","err","userAuth","_context4","then","listen","error"],"mappings":"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","file":"app.min.js","sourcesContent":["const express = require(\"express\");\r\nconst connectDB = require(\"./config/database\");\r\nconst app = express();\r\nconst User = require(\"./models/user\");\r\nconst {validationDatabase}=require(\"./utils/validation\")\r\nconst bcrypt=require(\"bcrypt\");\r\nconst cookieParser=require(\"cookie-parser\");\r\nconst jwt=require(\"jsonwebtoken\");\r\nconst{userAuth}=require(\"./middlewares/auth\")\r\n\r\napp.use(express.json());\r\napp.use(cookieParser())\r\n\r\napp.post(\"/signup\", async (req, res) => {\r\n//validate user \r\nvalidationDatabase(req);\r\n\r\n//encrypt password\r\nconst{firstName,lastName,emailId,password}=req.body;\r\n  const existingUser = await User.findOne({ emailId });\r\n    if (existingUser) {\r\n      return res.status(400).send(\"Email already exists\");\r\n    }\r\nconst validatePass=await bcrypt.hash(password,10);\r\nconsole.log(validatePass);\r\n  //   Creating a new instance of the User model\r\n  const user = new User({\r\n    firstName,\r\n    lastName,\r\n    password:validatePass,\r\n    emailId\r\n  });\r\n\r\n  try {\r\n    await user.save();\r\n    runValidators=true;\r\n    res.send(\"User Added successfully!\");\r\n  } catch (err) {\r\nif (err.code === 11000) {\r\n      return res.status(400).send(\"Email already exists\");\r\n    }\r\n    res.status(400).send(\"Error saving user: \" + err.message);\r\n  }\r\n});\r\n\r\napp.post(\"/login\",async (req,res)=>{\r\nconst {emailId,password}=req.body;\r\ntry{\r\nconst user=await User.findOne({emailId:emailId});\r\nif(!user){\r\n    throw new Error(\"Invalid Credentials\")\r\n}\r\n\r\nconst isPasswordValid=await user.validatePassword(password);\r\nif(isPasswordValid){\r\n    //create a jwt token\r\n    const token =await user.getJWT();\r\n    //add token to the cookie and send back the response\r\n    res.cookie(\"token\",token,{expires:new Date(Date.now()+ 8* 3600000)});\r\n    res.send(\"Login Successfull..\")\r\n}else{\r\n    throw new error(\"Invalid Credentials\")\r\n}\r\n}catch(err){\r\n    res.status(400).send(\"invalid Credentials \"+ err.message);\r\n}\r\n\r\n})\r\n\r\napp.get(\"/profile\",userAuth,async (req,res)=>{\r\ntry{\r\nconst userId=req.user; \r\nres.send(userId);\r\n}catch (err) {\r\n    res.status(400).send(\"Something went wrong \");\r\n  }\r\n})\r\napp.post(\"/sendConnectionRequest\",userAuth,async (req,res)=>{\r\n    const user=req.user;\r\n    res.send(\"connection Request Sent!\")\r\n})\r\n\r\nconnectDB()\r\n  .then(() => {\r\n    console.log(\"Database connection established...\");\r\n    app.listen(7777, () => {\r\n      console.log(\"Server is successfully listening on port 7777...\");\r\n    });\r\n  })\r\n  .catch((err) => {\r\n    console.error(\"Database cannot be connected!!\");\r\n  });"]}