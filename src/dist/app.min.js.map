{"version":3,"sources":["app.js"],"names":["express","require","connectDB","User","app","use","json","post","req","res","user","regeneratorRuntime","async","_context","prev","next","body","awrap","save","runValidators","send","t0","code","abrupt","status","message","stop","emailId","console","log","userEmail","findOne","get","users","_context3","find","sent","userId","_context4","findByIdAndDelete","data","ALLOWED_UPDATES","_context5","params","Object","keys","every","k","includes","Error","findByIdAndUpdate","_id","returnDocument","then","listen","error"],"mappings":"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","file":"app.min.js","sourcesContent":["const express = require(\"express\");\r\nconst connectDB = require(\"./config/database\");\r\nconst app = express();\r\nconst User = require(\"./models/user\");\r\n\r\napp.use(express.json());\r\n\r\napp.post(\"/signup\", async (req, res) => {\r\n  //   Creating a new instance of the User model\r\n  const user = new User(req.body);\r\n\r\n  try {\r\n    await user.save();\r\n    runValidators=true;\r\n    res.send(\"User Added successfully!\");\r\n  } catch (err) {\r\nif (err.code === 11000) {\r\n      return res.status(400).send(\"Email already exists\");\r\n    }\r\n    res.status(400).send(\"Error saving user: \" + err.message);\r\n  }\r\n});\r\n\r\n// Get user by email\r\napp.get(\"/user\", async (req, res) => {\r\n  const userEmail = req.body.emailId;\r\n\r\n  try {\r\n    console.log(userEmail);\r\n    const user = await User.findOne({ emailId: userEmail });\r\n    if (!user) {\r\n      res.status(404).send(\"User not found\");\r\n    } else {\r\n      res.send(user);\r\n    }\r\n\r\n    // const users = await User.find({ emailId: userEmail });\r\n    // if (users.length === 0) {\r\n    //   res.status(404).send(\"User not found\");\r\n    // } else {\r\n    //   res.send(users);\r\n    // }\r\n  } catch (err) {\r\n    res.status(400).send(\"Something went wrong \");\r\n  }\r\n});\r\n\r\n// Feed API - GET /feed - get all the users from the database\r\napp.get(\"/feed\", async (req, res) => {\r\n  try {\r\n    const users = await User.find({});\r\n    res.send(users);\r\n  } catch (err) {\r\n    res.status(400).send(\"Something went wrong \");\r\n  }\r\n});\r\n\r\n// Detele a user from the database\r\napp.delete(\"/user\", async (req, res) => {\r\n  const userId = req.body.userId;\r\n  try {\r\n    const user = await User.findByIdAndDelete({ _id: userId });\r\n    //const user = await User.findByIdAndDelete(userId);\r\n\r\n    res.send(\"User deleted successfully\");\r\n  } catch (err) {\r\n    res.status(400).send(\"Something went wrong \");\r\n  }\r\n});\r\n\r\n// Update data of the user\r\napp.patch(\"/user/:userId\", async (req, res) => {\r\n  const userId = req.params.userId;\r\n  const data = req.body;\r\n  try {\r\n    const ALLOWED_UPDATES=[\r\n        \"photoUrl\",\r\n        \"about\",\r\n        \"gender\",\r\n        \"skills\"\r\n    ]\r\n    const isUpdateAllowed=Object.keys(data).every((k)=> ALLOWED_UPDATES.includes(k)\r\n    );\r\n    if(!isUpdateAllowed){\r\n        throw new Error(\"Updates not allowed\");\r\n    }\r\n    if(data.skills.length>10){\r\n        throw new Error(\"skills cannot be more than 10\");\r\n    }\r\n    const user = await User.findByIdAndUpdate({ _id: userId }, data, {\r\n      returnDocument: \"after\",\r\n      runValidators: true,\r\n    });\r\n    console.log(user);\r\n    res.send(\"User updated successfully\");\r\n  } catch (err) {\r\n   \r\n    res.status(400).send(\"UPDATE FAILED:\" + err.message);\r\n  }\r\n});\r\n\r\nconnectDB()\r\n  .then(() => {\r\n    console.log(\"Database connection established...\");\r\n    app.listen(7777, () => {\r\n      console.log(\"Server is successfully listening on port 7777...\");\r\n    });\r\n  })\r\n  .catch((err) => {\r\n    console.error(\"Database cannot be connected!!\");\r\n  });"]}