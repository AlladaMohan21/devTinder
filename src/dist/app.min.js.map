{"version":3,"sources":["app.js"],"names":["express","require","connectDB","User","app","use","json","post","req","res","user","regeneratorRuntime","async","_context","prev","next","body","awrap","save","send","t0","status","message","stop","get","userEmail","_context2","emailId","findOne","sent","users","_context3","find","console","log","userId","_context4","findByIdAndDelete","_id","patch","data","_context5","findByIdAndUpdate","returnDocument","runValidators","then","listen","err","error"],"mappings":"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","file":"app.min.js","sourcesContent":["const express = require(\"express\");\r\nconst connectDB = require(\"./config/database\");\r\nconst app = express();\r\nconst User = require(\"./models/user\");\r\n\r\napp.use(express.json());\r\n\r\napp.post(\"/signup\", async (req, res) => {\r\n  //   Creating a new instance of the User model\r\n  const user = new User(req.body);\r\n\r\n  try {\r\n    await user.save();\r\n    res.send(\"User Added successfully!\");\r\n  } catch (err) {\r\n    res.status(400).send(\"Error saving the user:\" + err.message);\r\n  }\r\n});\r\n\r\n// Get user by email\r\napp.get(\"/user\", async (req, res) => {\r\n  const userEmail = req.body.emailId;\r\n\r\n  try {\r\n    console.log(userEmail);\r\n    const user = await User.findOne({ emailId: userEmail });\r\n    if (!user) {\r\n      res.status(404).send(\"User not found\");\r\n    } else {\r\n      res.send(user);\r\n    }\r\n\r\n    // const users = await User.find({ emailId: userEmail });\r\n    // if (users.length === 0) {\r\n    //   res.status(404).send(\"User not found\");\r\n    // } else {\r\n    //   res.send(users);\r\n    // }\r\n  } catch (err) {\r\n    res.status(400).send(\"Something went wrong \");\r\n  }\r\n});\r\n\r\n// Feed API - GET /feed - get all the users from the database\r\napp.get(\"/feed\", async (req, res) => {\r\n  try {\r\n    const users = await User.find({});\r\n    res.send(users);\r\n  } catch (err) {\r\n    res.status(400).send(\"Something went wrong \");\r\n  }\r\n});\r\n\r\n// Detele a user from the database\r\napp.delete(\"/user\", async (req, res) => {\r\n  const userId = req.body.userId;\r\n  try {\r\n    const user = await User.findByIdAndDelete({ _id: userId });\r\n    //const user = await User.findByIdAndDelete(userId);\r\n\r\n    res.send(\"User deleted successfully\");\r\n  } catch (err) {\r\n    res.status(400).send(\"Something went wrong \");\r\n  }\r\n});\r\n\r\n// Update data of the user\r\napp.patch(\"/user\", async (req, res) => {\r\n  const userId = req.body.userId;\r\n  const data = req.body;\r\n  try {\r\n    const user = await User.findByIdAndUpdate({ _id: userId }, data, {\r\n      returnDocument: \"after\",\r\n      runValidators: true,\r\n    });\r\n    console.log(user);\r\n    res.send(\"User updated successfully\");\r\n  } catch (err) {\r\n    res.status(400).send(\"Something went wrong \");\r\n    res.status(400).send(\"UPDATE FAILED:\" + err.message);\r\n  }\r\n});\r\n\r\nconnectDB()\r\n  .then(() => {\r\n    console.log(\"Database connection established...\");\r\n    app.listen(7777, () => {\r\n      console.log(\"Server is successfully listening on port 7777...\");\r\n    });\r\n  })\r\n  .catch((err) => {\r\n    console.error(\"Database cannot be connected!!\");\r\n  });"]}