{"version":3,"sources":["app.js"],"names":["express","require","connectDB","User","bcrypt","app","use","json","post","req","res","_req$body","firstName","lastName","emailId","password","validatePass","user","regeneratorRuntime","async","_context","prev","next","validationDatabase","body","awrap","findOne","sent","abrupt","status","send","hash","console","log","save","runValidators","t0","code","existingUser","message","stop","get","userEmail","_context2","users","_context3","find","userId","_context4","findByIdAndDelete","_id","patch","data","ALLOWED_UPDATES","_context5","params","Error","skills","length","findByIdAndUpdate","then","listen","err","error"],"mappings":"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","file":"app.min.js","sourcesContent":["const express = require(\"express\");\r\nconst connectDB = require(\"./config/database\");\r\nconst app = express();\r\nconst User = require(\"./models/user\");\r\nconst {validationDatabase}=require(\"./utils/validation\")\r\nconst bcrypt=require(\"bcrypt\");\r\n\r\napp.use(express.json());\r\n\r\napp.post(\"/signup\", async (req, res) => {\r\n//validate user \r\nvalidationDatabase(req);\r\n\r\n//encrypt password\r\nconst{firstName,lastName,emailId,password}=req.body;\r\n  const existingUser = await User.findOne({ emailId });\r\n    if (existingUser) {\r\n      return res.status(400).send(\"Email already exists\");\r\n    }\r\nconst validatePass=await bcrypt.hash(password,10);\r\nconsole.log(validatePass);\r\n  //   Creating a new instance of the User model\r\n  const user = new User({\r\n    firstName,\r\n    lastName,\r\n    password:validatePass,\r\n    emailId\r\n  });\r\n\r\n  try {\r\n    await user.save();\r\n    runValidators=true;\r\n    res.send(\"User Added successfully!\");\r\n  } catch (err) {\r\nif (err.code === 11000) {\r\n      return res.status(400).send(\"Email already exists\");\r\n    }\r\n    res.status(400).send(\"Error saving user: \" + err.message);\r\n  }\r\n});\r\n\r\n// Get user by email\r\napp.get(\"/user\", async (req, res) => {\r\n  const userEmail = req.body.emailId;\r\n\r\n  try {\r\n    console.log(userEmail);\r\n    const user = await User.findOne({ emailId: userEmail });\r\n    if (!user) {\r\n      res.status(404).send(\"User not found\");\r\n    } else {\r\n      res.send(user);\r\n    }\r\n\r\n    // const users = await User.find({ emailId: userEmail });\r\n    // if (users.length === 0) {\r\n    //   res.status(404).send(\"User not found\");\r\n    // } else {\r\n    //   res.send(users);\r\n    // }\r\n  } catch (err) {\r\n    res.status(400).send(\"Something went wrong \");\r\n  }\r\n});\r\n\r\n// Feed API - GET /feed - get all the users from the database\r\napp.get(\"/feed\", async (req, res) => {\r\n  try {\r\n    const users = await User.find({});\r\n    res.send(users);\r\n  } catch (err) {\r\n    res.status(400).send(\"Something went wrong \");\r\n  }\r\n});\r\n\r\n// Detele a user from the database\r\napp.delete(\"/user\", async (req, res) => {\r\n  const userId = req.body.userId;\r\n  try {\r\n    const user = await User.findByIdAndDelete({ _id: userId });\r\n    //const user = await User.findByIdAndDelete(userId);\r\n\r\n    res.send(\"User deleted successfully\");\r\n  } catch (err) {\r\n    res.status(400).send(\"Something went wrong \");\r\n  }\r\n});\r\n\r\n// Update data of the user\r\napp.patch(\"/user/:userId\", async (req, res) => {\r\n  const userId = req.params.userId;\r\n  const data = req.body;\r\n  try {\r\n    const ALLOWED_UPDATES=[\r\n        \"photoUrl\",\r\n        \"about\",\r\n        \"gender\",\r\n        \"skills\"\r\n    ]\r\n    const isUpdateAllowed=Object.keys(data).every((k)=> ALLOWED_UPDATES.includes(k)\r\n    );\r\n    if(!isUpdateAllowed){\r\n        throw new Error(\"Updates not allowed\");\r\n    }\r\n    if(data.skills.length>10){\r\n        throw new Error(\"skills cannot be more than 10\");\r\n    }\r\n    const user = await User.findByIdAndUpdate({ _id: userId }, data, {\r\n      returnDocument: \"after\",\r\n      runValidators: true,\r\n    });\r\n    console.log(user);\r\n    res.send(\"User updated successfully\");\r\n  } catch (err) {\r\n   \r\n    res.status(400).send(\"UPDATE FAILED:\" + err.message);\r\n  }\r\n});\r\n\r\nconnectDB()\r\n  .then(() => {\r\n    console.log(\"Database connection established...\");\r\n    app.listen(7777, () => {\r\n      console.log(\"Server is successfully listening on port 7777...\");\r\n    });\r\n  })\r\n  .catch((err) => {\r\n    console.error(\"Database cannot be connected!!\");\r\n  });"]}