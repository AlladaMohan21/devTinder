{"version":3,"sources":["app.js"],"names":["express","require","connectDB","User","bcrypt","app","jwt","use","json","cookieParser","post","req","res","_req$body","firstName","lastName","emailId","password","validatePass","user","regeneratorRuntime","async","_context","prev","next","validationDatabase","body","awrap","findOne","sent","abrupt","send","hash","console","log","save","t0","code","existingUser","status","message","stop","_req$body2","token","_context2","Error","compare","sign","_id","error","get","cookies","decodedMessage","userId","_context3","verify","findById","userEmail","_context4","users","_context5","find","isPasswordValid","_context6","findByIdAndDelete","patch","data","ALLOWED_UPDATES","_context7","params","Object","keys","every","k","includes","skills","length","findByIdAndUpdate","returnDocument","runValidators","then","listen","err"],"mappings":"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","file":"app.min.js","sourcesContent":["const express = require(\"express\");\r\nconst connectDB = require(\"./config/database\");\r\nconst app = express();\r\nconst User = require(\"./models/user\");\r\nconst {validationDatabase}=require(\"./utils/validation\")\r\nconst bcrypt=require(\"bcrypt\");\r\nconst cookieParser=require(\"cookie-parser\");\r\nconst jwt=require(\"jsonwebtoken\");\r\n\r\napp.use(express.json());\r\napp.use(cookieParser())\r\n\r\napp.post(\"/signup\", async (req, res) => {\r\n//validate user \r\nvalidationDatabase(req);\r\n\r\n//encrypt password\r\nconst{firstName,lastName,emailId,password}=req.body;\r\n  const existingUser = await User.findOne({ emailId });\r\n    if (existingUser) {\r\n      return res.status(400).send(\"Email already exists\");\r\n    }\r\nconst validatePass=await bcrypt.hash(password,10);\r\nconsole.log(validatePass);\r\n  //   Creating a new instance of the User model\r\n  const user = new User({\r\n    firstName,\r\n    lastName,\r\n    password:validatePass,\r\n    emailId\r\n  });\r\n\r\n  try {\r\n    await user.save();\r\n    runValidators=true;\r\n    res.send(\"User Added successfully!\");\r\n  } catch (err) {\r\nif (err.code === 11000) {\r\n      return res.status(400).send(\"Email already exists\");\r\n    }\r\n    res.status(400).send(\"Error saving user: \" + err.message);\r\n  }\r\n});\r\n\r\napp.post(\"/login\",async (req,res)=>{\r\nconst {emailId,password}=req.body;\r\ntry{\r\nconst user=await User.findOne({emailId:emailId});\r\nif(!user){\r\n    throw new Error(\"Invalid Credentials\")\r\n}\r\n\r\nconst isPasswordValid=await bcrypt.compare(password,user.password);\r\nif(isPasswordValid){\r\n    //create a jwt token\r\n    const token =await jwt.sign({_id:user._id},\"DEV@Tinder$123\");\r\n\r\n    //add token to the cookie and send back the response\r\n    res.cookie(\"token\",token);\r\n    res.send(\"Login Successfull..\")\r\n}else{\r\n    throw new error(\"Invalid Credentials\")\r\n}\r\n}catch(err){\r\n    res.status(400).send(\"invalid Credentials \"+ err.message);\r\n}\r\n\r\n})\r\n\r\napp.get(\"/profile\",async (req,res)=>{\r\nconst cookies=req.cookies;\r\n\r\nconst{token}=cookies;\r\n\r\n//validate my token \r\nif(!token){\r\n    throw new Error(\"Invalid TOken\")\r\n}\r\ntry{\r\nconst decodedMessage=await jwt.verify(token,\"DEV@Tinder$123\")\r\nconst {_id}=decodedMessage;\r\nconsole.log(\"Logged In user is\"+_id);\r\nconst userId=await User.findById(_id);\r\nif(!userId){\r\n    throw new Error(\"User Does Not Exists\")\r\n}\r\nres.send(userId);\r\n}catch (err) {\r\n    res.status(400).send(\"Something went wrong \");\r\n  }\r\n})\r\n// Get user by email\r\napp.get(\"/user\", async (req, res) => {\r\n  const userEmail = req.body.emailId;\r\n\r\n  try {\r\n    console.log(userEmail);\r\n    const user = await User.findOne({ emailId: userEmail });\r\n    if (!user) {\r\n      res.status(404).send(\"User not found\");\r\n    } else {\r\n      res.send(user);\r\n    }\r\n\r\n    // const users = await User.find({ emailId: userEmail });\r\n    // if (users.length === 0) {\r\n    //   res.status(404).send(\"User not found\");\r\n    // } else {\r\n    //   res.send(users);\r\n    // }\r\n  } catch (err) {\r\n    res.status(400).send(\"Something went wrong \");\r\n  }\r\n});\r\n\r\n// Feed API - GET /feed - get all the users from the database\r\napp.get(\"/feed\", async (req, res) => {\r\n  try {\r\n    const users = await User.find({});\r\n    res.send(users);\r\n  } catch (err) {\r\n    res.status(400).send(\"Something went wrong \");\r\n  }\r\n});\r\n\r\n// Detele a user from the database\r\napp.delete(\"/user\", async (req, res) => {\r\n  const userId = req.body.userId;\r\n  try {\r\n    const user = await User.findByIdAndDelete({ _id: userId });\r\n    //const user = await User.findByIdAndDelete(userId);\r\n\r\n    res.send(\"User deleted successfully\");\r\n  } catch (err) {\r\n    res.status(400).send(\"Something went wrong \");\r\n  }\r\n});\r\n\r\n// Update data of the user\r\napp.patch(\"/user/:userId\", async (req, res) => {\r\n  const userId = req.params.userId;\r\n  const data = req.body;\r\n  try {\r\n    const ALLOWED_UPDATES=[\r\n        \"photoUrl\",\r\n        \"about\",\r\n        \"gender\",\r\n        \"skills\"\r\n    ]\r\n    const isUpdateAllowed=Object.keys(data).every((k)=> ALLOWED_UPDATES.includes(k)\r\n    );\r\n    if(!isUpdateAllowed){\r\n        throw new Error(\"Updates not allowed\");\r\n    }\r\n    if(data.skills.length>10){\r\n        throw new Error(\"skills cannot be more than 10\");\r\n    }\r\n    const user = await User.findByIdAndUpdate({ _id: userId }, data, {\r\n      returnDocument: \"after\",\r\n      runValidators: true,\r\n    });\r\n    console.log(user);\r\n    res.send(\"User updated successfully\");\r\n  } catch (err) {\r\n   \r\n    res.status(400).send(\"UPDATE FAILED:\" + err.message);\r\n  }\r\n});\r\n\r\nconnectDB()\r\n  .then(() => {\r\n    console.log(\"Database connection established...\");\r\n    app.listen(7777, () => {\r\n      console.log(\"Server is successfully listening on port 7777...\");\r\n    });\r\n  })\r\n  .catch((err) => {\r\n    console.error(\"Database cannot be connected!!\");\r\n  });"]}