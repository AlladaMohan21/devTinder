"use strict";var express=require("express"),connectDB=require("./config/database"),app=express(),User=require("./models/user");app.use(express.json()),app.post("/signup",function(n,r){var t;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return t=new User(n.body),e.prev=1,e.next=4,regeneratorRuntime.awrap(t.save());case 4:runValidators=!0,r.send("User Added successfully!"),e.next=13;break;case 8:if(e.prev=8,e.t0=e.catch(1),11e3===e.t0.code)return e.abrupt("return",r.status(400).send("Email already exists"));e.next=12;break;case 12:r.status(400).send("Error saving user: "+e.t0.message);case 13:case"end":return e.stop()}},null,null,[[1,8]])}),app.get("/user",function(n,r){var t,s;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return t=n.body.emailId,e.prev=1,console.log(t),e.next=5,regeneratorRuntime.awrap(User.findOne({emailId:t}));case 5:(s=e.sent)?r.send(s):r.status(404).send("User not found"),e.next=12;break;case 9:e.prev=9,e.t0=e.catch(1),r.status(400).send("Something went wrong ");case 12:case"end":return e.stop()}},null,null,[[1,9]])}),app.get("/feed",function(e,n){var r;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,regeneratorRuntime.awrap(User.find({}));case 3:r=e.sent,n.send(r),e.next=10;break;case 7:e.prev=7,e.t0=e.catch(0),n.status(400).send("Something went wrong ");case 10:case"end":return e.stop()}},null,null,[[0,7]])}),app.delete("/user",function(n,r){var t;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return t=n.body.userId,e.prev=1,e.next=4,regeneratorRuntime.awrap(User.findByIdAndDelete({_id:t}));case 4:e.sent,r.send("User deleted successfully"),e.next=11;break;case 8:e.prev=8,e.t0=e.catch(1),r.status(400).send("Something went wrong ");case 11:case"end":return e.stop()}},null,null,[[1,8]])}),app.patch("/user/:userId",function(n,r){var t,s,a,c;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:if(t=n.params.userId,s=n.body,e.prev=2,a=["photoUrl","about","gender","skills"],Object.keys(s).every(function(e){return a.includes(e)})){e.next=7;break}throw new Error("Updates not allowed");case 7:if(10<s.skills.length)throw new Error("skills cannot be more than 10");e.next=9;break;case 9:return e.next=11,regeneratorRuntime.awrap(User.findByIdAndUpdate({_id:t},s,{returnDocument:"after",runValidators:!0}));case 11:c=e.sent,console.log(c),r.send("User updated successfully"),e.next=19;break;case 16:e.prev=16,e.t0=e.catch(2),r.status(400).send("UPDATE FAILED:"+e.t0.message);case 19:case"end":return e.stop()}},null,null,[[2,16]])}),connectDB().then(function(){console.log("Database connection established..."),app.listen(7777,function(){console.log("Server is successfully listening on port 7777...")})}).catch(function(e){console.error("Database cannot be connected!!")});
//# sourceMappingURL=app.min.js.map
