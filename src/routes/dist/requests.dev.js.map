{"version":3,"sources":["requests.js"],"names":["express","require","requestRouter","Router","userAuth","ConnectionRequest","User","post","req","res","fromUserId","user","_id","toUserId","params","status","allowedStatus","includes","json","message","findById","toUser","findOne","$or","existingConnectionRequest","send","connectionRequest","save","data","firstName","loggedInUser","requestId","messaage","module","exports"],"mappings":"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","sourcesContent":["const express = require(\"express\");\r\nconst requestRouter = express.Router();\r\n\r\nconst { userAuth } = require(\"../middlewares/auth\");\r\nconst ConnectionRequest = require(\"../models/connectionRequest\");\r\nconst User = require(\"../models/user\");\r\n\r\nrequestRouter.post(\r\n  \"/request/send/:status/:toUserId\",\r\n  userAuth,\r\n  async (req, res) => {\r\n    try {\r\n      const fromUserId = req.user._id;\r\n      const toUserId = req.params.toUserId;\r\n      const status = req.params.status;\r\n\r\n      const allowedStatus = [\"ignored\", \"interested\"];\r\n      if (!allowedStatus.includes(status)) {\r\n        return res\r\n          .status(400)\r\n          .json({ message: \"Invalid status type: \" + status });\r\n      }\r\n\r\n      const toUser = await User.findById(toUserId);\r\n      if (!toUser) {\r\n        return res.status(404).json({ message: \"User not found!\" });\r\n      }\r\n\r\n      const existingConnectionRequest = await ConnectionRequest.findOne({\r\n        $or: [\r\n          { fromUserId, toUserId },\r\n          { fromUserId: toUserId, toUserId: fromUserId },\r\n        ],\r\n      });\r\n      if (existingConnectionRequest) {\r\n        return res\r\n          .status(400)\r\n          .send({ message: \"Connection Request Already Exists!!\" });\r\n      }\r\n\r\n      const connectionRequest = new ConnectionRequest({\r\n        fromUserId,\r\n        toUserId,\r\n        status,\r\n      });\r\n\r\n      const data = await connectionRequest.save();\r\n\r\n      res.json({\r\n        message:\r\n          req.user.firstName + \" is \" + status + \" in \" + toUser.firstName,\r\n        data,\r\n      });\r\n    } catch (err) {\r\n      res.status(400).send(\"ERROR: \" + err.message);\r\n    }\r\n  }\r\n);\r\n\r\nrequestRouter.post(\r\n  \"/request/review/:status/:requestId\",\r\n  userAuth,\r\n  async (req, res) => {\r\n    try {\r\n      const loggedInUser = req.user;\r\n      const { status, requestId } = req.params;\r\n\r\n      const allowedStatus = [\"accepted\", \"rejected\"];\r\n      if (!allowedStatus.includes(status)) {\r\n        return res.status(400).json({ messaage: \"Status not allowed!\" });\r\n      }\r\n\r\n      const connectionRequest = await ConnectionRequest.findOne({\r\n        _id: requestId,\r\n        toUserId: loggedInUser._id,\r\n        status: \"interested\",\r\n      });\r\n      if (!connectionRequest) {\r\n        return res\r\n          .status(404)\r\n          .json({ message: \"Connection request not found\" });\r\n      }\r\n\r\n      connectionRequest.status = status;\r\n\r\n      const data = await connectionRequest.save();\r\n\r\n      res.json({ message: \"Connection request \" + status, data });\r\n    } catch (err) {\r\n      res.status(400).send(\"ERROR: \" + err.message);\r\n    }\r\n  }\r\n);\r\n\r\nmodule.exports = requestRouter;"],"file":"requests.dev.js"}