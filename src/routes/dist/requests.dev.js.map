{"version":3,"sources":["requests.js"],"names":["express","require","requestRouter","Router","userAuth","ConnectionRequestModel","User","post","req","res","fromUserId","user","_id","toUserId","params","status","allowedstatus","includes","json","message","findById","toUser","findOne","$or","existingConnectionRequest","send","connectionRequest","save","data","console","error","module","exports"],"mappings":";;AAAA,IAAMA,OAAO,GAAEC,OAAO,CAAC,SAAD,CAAtB;;AACA,IAAMC,aAAa,GAACF,OAAO,CAACG,MAAR,EAApB;;eACgBF,OAAO,CAAC,qBAAD,C;IAAjBG,Q,YAAAA,Q;;AACN,IAAMC,sBAAsB,GAACJ,OAAO,CAAC,6BAAD,CAApC;;AACA,IAAMK,IAAI,GAACL,OAAO,CAAC,gBAAD,CAAlB;;AAEAC,aAAa,CAACK,IAAd,CAAmB,iCAAnB,EAAqDH,QAArD,EAA8D,iBAAOI,GAAP,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEtDC,UAAAA,UAFsD,GAE3CF,GAAG,CAACG,IAAJ,CAASC,GAFkC;AAGpDC,UAAAA,QAHoD,GAG3CL,GAAG,CAACM,MAAJ,CAAWD,QAHgC;AAIvDE,UAAAA,MAJuD,GAI7CP,GAAG,CAACM,MAAJ,CAAWC,MAJkC;AAMxDC,UAAAA,aANwD,GAM1C,CAAC,SAAD,EAAW,YAAX,CAN0C;;AAAA,cAO1DA,aAAa,CAACC,QAAd,CAAuBF,MAAvB,CAP0D;AAAA;AAAA;AAAA;;AAAA,2CAQnDN,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBG,IAAhB,CAAqB;AACxBC,YAAAA,OAAO,EAAC;AADgB,WAArB,CARmD;;AAAA;AAAA;AAAA,0CAa1Cb,IAAI,CAACc,QAAL,CAAcP,QAAd,CAb0C;;AAAA;AAaxDQ,UAAAA,MAbwD;;AAAA,cAc1DA,MAd0D;AAAA;AAAA;AAAA;;AAAA,2CAenDZ,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBG,IAAhB,CAAqB;AACxBC,YAAAA,OAAO,EAAC;AADgB,WAArB,CAfmD;;AAAA;AAAA;AAAA,0CAmBxBd,sBAAsB,CAACiB,OAAvB,CAA+B;AACjEC,YAAAA,GAAG,EAAC,CACA;AAACb,cAAAA,UAAU,EAAVA,UAAD;AAAYG,cAAAA,QAAQ,EAARA;AAAZ,aADA,EAEA;AAACH,cAAAA,UAAU,EAACG,QAAZ;AAAqBA,cAAAA,QAAQ,EAACH;AAA9B,aAFA;AAD6D,WAA/B,CAnBwB;;AAAA;AAmBxDc,UAAAA,yBAnBwD;;AAAA,eAyB3DA,yBAzB2D;AAAA;AAAA;AAAA;;AAAA,2CA0BnDf,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBU,IAAhB,CAAqB;AACxBN,YAAAA,OAAO,EAAC;AADgB,WAArB,CA1BmD;;AAAA;AAiCpDO,UAAAA,iBAjCoD,GAiClC,IAAIrB,sBAAJ,CAA2B;AAC/CK,YAAAA,UAAU,EAAVA,UAD+C;AAE/CG,YAAAA,QAAQ,EAARA,QAF+C;AAG/CE,YAAAA,MAAM,EAANA;AAH+C,WAA3B,CAjCkC;AAAA;AAAA,0CAsCzCW,iBAAiB,CAACC,IAAlB,EAtCyC;;AAAA;AAsCpDC,UAAAA,IAtCoD;AAuC1DnB,UAAAA,GAAG,CAACS,IAAJ,CAAS;AAACC,YAAAA,OAAO,EAAC,0BAAT;AACLS,YAAAA,IAAI,EAAJA;AADK,WAAT;AAvC0D;AAAA;;AAAA;AAAA;AAAA;AA2C5DC,UAAAA,OAAO,CAACC,KAAR,CAAc,2BAAd;AACArB,UAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBU,IAAhB,CAAqB,wBAAwB,YAAIN,OAAjD;;AA5C4D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA9D;AAkDAY,MAAM,CAACC,OAAP,GAAe9B,aAAf","sourcesContent":["const express= require(\"express\");\r\nconst requestRouter=express.Router();\r\nconst{userAuth}=require(\"../middlewares/auth\")\r\nconst ConnectionRequestModel=require(\"../models/connectionRequest\");\r\nconst User=require(\"../models/user\");\r\n\r\nrequestRouter.post(\"/request/send/:status/:toUserId\",userAuth,async (req,res)=>{\r\n    try{\r\n  const fromUserId=req.user._id;\r\n    const toUserId=req.params.toUserId;\r\nconst  status  = req.params.status;\r\n\r\nconst allowedstatus=[\"ignored\",\"interested\"];\r\nif(!allowedstatus.includes(status)){\r\n    return res.status(400).json({\r\n        message:\"Invalid status type\"\r\n    })\r\n}\r\n\r\nconst toUser =await User.findById(toUserId);\r\nif(!toUser){\r\n    return res.status(400).json({\r\n        message:\"User Not Found\"\r\n    })\r\n}\r\nconst existingConnectionRequest=await ConnectionRequestModel.findOne({\r\n    $or:[\r\n        {fromUserId,toUserId},\r\n        {fromUserId:toUserId,toUserId:fromUserId},\r\n    ]\r\n})\r\nif(existingConnectionRequest){\r\n    return res.status(400).send({\r\n        message:\"Connection Request already Exists\"\r\n    });\r\n}\r\n\r\n\r\n\r\n    const connectionRequest=new ConnectionRequestModel({\r\n        fromUserId,\r\n        toUserId,\r\n        status,\r\n    });\r\n    const data=await connectionRequest.save();\r\n    res.json({message:\"connection Request Sent!\",\r\n        data\r\n    })\r\n    }catch(err){\r\n  console.error(\"Connection request error:\", err);\r\n  res.status(400).send(\"Connection failed: \" + err.message);\r\n}\r\n\r\n  \r\n})\r\n\r\nmodule.exports=requestRouter;\r\n"],"file":"requests.dev.js"}