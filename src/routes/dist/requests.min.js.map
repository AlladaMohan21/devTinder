{"version":3,"sources":["requests.js"],"names":["express","require","requestRouter","Router","userAuth","User","post","req","res","fromUserId","toUserId","status","toUser","connectionRequest","data","regeneratorRuntime","async","_context","prev","next","user","_id","params","includes","abrupt","awrap","findById","allowedStatus","sent","ConnectionRequest","findOne","$or","message","send","json","firstName","t0","stop","loggedInUser","_req$params","requestId","_context2","existingConnectionRequest","messaage","save","module","exports"],"mappings":"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","file":"requests.min.js","sourcesContent":["const express = require(\"express\");\r\nconst requestRouter = express.Router();\r\n\r\nconst { userAuth } = require(\"../middlewares/auth\");\r\nconst ConnectionRequest = require(\"../models/connectionRequest\");\r\nconst User = require(\"../models/user\");\r\n\r\nrequestRouter.post(\r\n  \"/request/send/:status/:toUserId\",\r\n  userAuth,\r\n  async (req, res) => {\r\n    try {\r\n      const fromUserId = req.user._id;\r\n      const toUserId = req.params.toUserId;\r\n      const status = req.params.status;\r\n\r\n      const allowedStatus = [\"ignored\", \"interested\"];\r\n      if (!allowedStatus.includes(status)) {\r\n        return res\r\n          .status(400)\r\n          .json({ message: \"Invalid status type: \" + status });\r\n      }\r\n\r\n      const toUser = await User.findById(toUserId);\r\n      if (!toUser) {\r\n        return res.status(404).json({ message: \"User not found!\" });\r\n      }\r\n\r\n      const existingConnectionRequest = await ConnectionRequest.findOne({\r\n        $or: [\r\n          { fromUserId, toUserId },\r\n          { fromUserId: toUserId, toUserId: fromUserId },\r\n        ],\r\n      });\r\n      if (existingConnectionRequest) {\r\n        return res\r\n          .status(400)\r\n          .send({ message: \"Connection Request Already Exists!!\" });\r\n      }\r\n\r\n      const connectionRequest = new ConnectionRequest({\r\n        fromUserId,\r\n        toUserId,\r\n        status,\r\n      });\r\n\r\n      const data = await connectionRequest.save();\r\n\r\n      res.json({\r\n        message:\r\n          req.user.firstName + \" is \" + status + \" in \" + toUser.firstName,\r\n        data,\r\n      });\r\n    } catch (err) {\r\n      res.status(400).send(\"ERROR: \" + err.message);\r\n    }\r\n  }\r\n);\r\n\r\nrequestRouter.post(\r\n  \"/request/review/:status/:requestId\",\r\n  userAuth,\r\n  async (req, res) => {\r\n    try {\r\n      const loggedInUser = req.user;\r\n      const { status, requestId } = req.params;\r\n\r\n      const allowedStatus = [\"accepted\", \"rejected\"];\r\n      if (!allowedStatus.includes(status)) {\r\n        return res.status(400).json({ messaage: \"Status not allowed!\" });\r\n      }\r\n\r\n      const connectionRequest = await ConnectionRequest.findOne({\r\n        _id: requestId,\r\n        toUserId: loggedInUser._id,\r\n        status: \"interested\",\r\n      });\r\n      if (!connectionRequest) {\r\n        return res\r\n          .status(404)\r\n          .json({ message: \"Connection request not found\" });\r\n      }\r\n\r\n      connectionRequest.status = status;\r\n\r\n      const data = await connectionRequest.save();\r\n\r\n      res.json({ message: \"Connection request \" + status, data });\r\n    } catch (err) {\r\n      res.status(400).send(\"ERROR: \" + err.message);\r\n    }\r\n  }\r\n);\r\n\r\nmodule.exports = requestRouter;"]}