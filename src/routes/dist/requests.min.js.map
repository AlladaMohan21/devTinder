{"version":3,"sources":["requests.js"],"names":["express","require","requestRouter","Router","ConnectionRequestModel","post","userAuth","req","res","fromUserId","toUserId","status","connectionRequest","data","regeneratorRuntime","async","_context","prev","next","user","_id","params","includes","abrupt","json","message","awrap","User","findById","sent","findOne","$or","send","toUser","save","t0","console","error","stop","module","exports"],"mappings":"aAAA,IAAMA,QAASC,QAAQ,WACjBC,cAAcF,QAAQG,kBADbF,QAAQ,uBAAjBD,kBAAAA,SAGAI,uBAAuBH,QAAQ,+BAF/BC,KAAAA,QAAa,kBAKnBA,cAAcG,KAJEJ,kCAIqCK,SAAS,SAAOC,EAAIC,GAAX,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,GAAAF,EAAAC,KAAA,EAEtDR,EAAWF,EAAIY,KAAKC,IALtBhB,EAAAA,EAAAA,OAAuBH,SAOtBU,EAAUJ,EAAIc,OAAOV,OAER,CAAC,UAAU,cAN/BW,SAAmBX,GAA2C,CAAAK,EAAAE,KAAA,EAAA,MAAA,OAAAF,EAAAO,OAAA,SAAAf,EAAAG,OAAA,KAAAa,KAAA,CAAAC,QAAA,yBAAA,KAAA,EAAA,OAAAT,EAAAE,KAAA,EAAAJ,mBAAAY,MAAAC,KAAAC,SAAAlB,IAAA,KAAA,EAAA,GAAAM,EAAAa,KAAA,CAAAb,EAAAE,KAAA,GAAA,MAAA,OAAAF,EAAAO,OAAA,SAGpDb,EAAAA,OAASH,KAAIc,KAAOX,CACvBC,QAJuD,oBAAA,KAAA,GAAA,OAAAK,EAAAE,KAAA,GAAAJ,mBAAAY,MAOnCf,uBAPmCmB,QAAA,CAAAC,IAAA,CAAA,CAAAtB,WAAAA,EAAAC,SAAAA,GAAA,CAAAD,WAAAC,EAAAA,SAAAD,OAAA,KAAA,GAAA,GAAAO,EAAAa,KAAA,OAAAb,EAAAO,OAAA,SAQnDf,EARmDG,OAAA,KAAAqB,KAAA,CA2BtDP,QAAQ,uCA3B8CT,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAA,OAaxDe,EAbwD,IAAA7B,uBAAA,CAkCtDK,WAAAA,EAlCsDC,SAAAA,EAAAC,OAAAA,IAAAK,EAAAE,KAAA,GAAAJ,mBAAAY,MAAAd,EAAAsB,QAAA,KAAA,GAAArB,EAAAG,EAAAa,KAuC1DrB,EAAIgB,KAAK,CAACC,QAAQ,2BAvCwCZ,KAAAA,IAAAG,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAmB,GAAAnB,EAAA,MAAA,GA2C5DoB,QAAQC,MAAM,4BAAdrB,EAAAmB,IA3C4D3B,EAAAG,OAAA,KAAAqB,KAAA,sBAAAhB,EAAAmB,GAAAV,SAAA,KAAA,GAAA,IAAA,MAAA,OAAAT,EAAAsB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,QAqBtDC,OAAAC,QACAtC","file":"requests.min.js","sourcesContent":["const express= require(\"express\");\r\nconst requestRouter=express.Router();\r\nconst{userAuth}=require(\"../middlewares/auth\")\r\nconst ConnectionRequestModel=require(\"../models/connectionRequest\");\r\nconst User=require(\"../models/user\");\r\n\r\nrequestRouter.post(\"/request/send/:status/:toUserId\",userAuth,async (req,res)=>{\r\n    try{\r\n  const fromUserId=req.user._id;\r\n    const toUserId=req.params.toUserId;\r\nconst  status  = req.params.status;\r\n\r\nconst allowedstatus=[\"ignored\",\"interested\"];\r\nif(!allowedstatus.includes(status)){\r\n    return res.status(400).json({\r\n        message:\"Invalid status type\"\r\n    })\r\n}\r\n\r\nconst toUser =await User.findById(toUserId);\r\nif(!toUser){\r\n    return res.status(400).json({\r\n        message:\"User Not Found\"\r\n    })\r\n}\r\nconst existingConnectionRequest=await ConnectionRequestModel.findOne({\r\n    $or:[\r\n        {fromUserId,toUserId},\r\n        {fromUserId:toUserId,toUserId:fromUserId},\r\n    ]\r\n})\r\nif(existingConnectionRequest){\r\n    return res.status(400).send({\r\n        message:\"Connection Request already Exists\"\r\n    });\r\n}\r\n\r\n\r\n\r\n    const connectionRequest=new ConnectionRequestModel({\r\n        fromUserId,\r\n        toUserId,\r\n        status,\r\n    });\r\n    const data=await connectionRequest.save();\r\n    res.json({message:\"connection Request Sent!\",\r\n        data\r\n    })\r\n    }catch(err){\r\n  console.error(\"Connection request error:\", err);\r\n  res.status(400).send(\"Connection failed: \" + err.message);\r\n}\r\n\r\n  \r\n})\r\n\r\nmodule.exports=requestRouter;\r\n"]}