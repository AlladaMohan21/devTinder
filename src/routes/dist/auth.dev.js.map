{"version":3,"sources":["auth.js"],"names":["express","require","authRouter","Router","validationDatabase","bcrypt","User","post","req","res","body","firstName","lastName","emailId","password","findOne","existingUser","status","send","hash","validatePass","console","log","user","save","runValidators","code","message","Error","validatePassword","isPasswordValid","getJWT","token","cookie","expires","Date","now","error","err","module","exports"],"mappings":"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","sourcesContent":["const express=require(\"express\");\r\nconst authRouter=express.Router();\r\nconst {validationDatabase}=require(\"../utils/validation\")\r\nconst bcrypt=require(\"bcrypt\");\r\nconst User = require(\"../models/user\");\r\n\r\nauthRouter.post(\"/signup\", async (req, res) => {\r\n//validate user \r\nvalidationDatabase(req);\r\n\r\n//encrypt password\r\nconst{firstName,lastName,emailId,password}=req.body;\r\n  const existingUser = await User.findOne({ emailId });\r\n    if (existingUser) {\r\n      return res.status(400).send(\"Email already exists\");\r\n    }\r\nconst validatePass=await bcrypt.hash(password,10);\r\nconsole.log(validatePass);\r\n  //   Creating a new instance of the User model\r\n  const user = new User({\r\n    firstName,\r\n    lastName,\r\n    password:validatePass,\r\n    emailId\r\n  });\r\n\r\n  try {\r\n    await user.save();\r\n    runValidators=true;\r\n    res.send(\"User Added successfully!\");\r\n  } catch (err) {\r\nif (err.code === 11000) {\r\n      return res.status(400).send(\"Email already exists\");\r\n    }\r\n    res.status(400).send(\"Error saving user: \" + err.message);\r\n  }\r\n});\r\nauthRouter.post(\"/login\",async (req,res)=>{\r\nconst {emailId,password}=req.body;\r\ntry{\r\nconst user=await User.findOne({emailId:emailId});\r\nif(!user){\r\n    throw new Error(\"Invalid Credentials\")\r\n}\r\n\r\nconst isPasswordValid=await user.validatePassword(password);\r\nif(isPasswordValid){\r\n    //create a jwt token\r\n    const token =await user.getJWT();\r\n    //add token to the cookie and send back the response\r\n    res.cookie(\"token\",token,{expires:new Date(Date.now()+ 8* 3600000)});\r\n    res.send(user);\r\n}else{\r\n    throw new error(\"Invalid Credentials\")\r\n}\r\n}catch(err){\r\n    res.status(400).send(\"invalid Credentials \"+ err.message);\r\n}\r\n\r\n});\r\n\r\nauthRouter.post(\"/logout\",async (req,res)=>{\r\n    try{\r\n    res.cookie(\"token\",\"\",{\r\n        expires:new Date(Date.now()),\r\n    });\r\n    res.status(200).send(\"Logout successful\");\r\n}catch(err){\r\n    res.status(400).send(\"logout failed\");\r\n}\r\n})\r\n\r\nmodule.exports=authRouter;\r\n"],"file":"auth.dev.js"}