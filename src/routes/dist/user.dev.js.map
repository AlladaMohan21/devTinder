{"version":3,"sources":["user.js"],"names":["express","require","userRouter","Router","User","userAuth","ConnectionRequest","USER_SAFE_DATA","get","req","res","loggedInUser","user","find","toUserId","_id","status","populate","connectionRequests","json","message","data","statusCode","send","$or","fromUserId","map","row","toString","page","parseInt","query","limit","skip","select","hideUsersFromFeed","Set","forEach","add","$and","$nin","Array","from","$ne","users","module","exports"],"mappings":"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","sourcesContent":["const express = require(\"express\");\r\nconst userRouter = express.Router();\r\nconst User=require(\"../models/user\")\r\n\r\nconst { userAuth } = require(\"../middlewares/auth\");\r\nconst ConnectionRequest = require(\"../models/connectionRequest\");\r\n\r\nconst USER_SAFE_DATA = \"firstName lastName photoUrl age gender about skills\";\r\n\r\n// Get all the pending connection request for the loggedIn user\r\nuserRouter.get(\"/user/requests/received\", userAuth, async (req, res) => {\r\n  try {\r\n    const loggedInUser = req.user;\r\n\r\n    const connectionRequests = await ConnectionRequest.find({\r\n      toUserId: loggedInUser._id,\r\n      status: \"interested\",\r\n    })\r\n    .populate(\"fromUserId\", USER_SAFE_DATA);\r\n    res.json({\r\n      message: \"Data fetched successfully\",\r\n      data: connectionRequests,\r\n    });\r\n  } catch (err) {\r\n    req.statusCode(400).send(\"ERROR: \" + err.message);\r\n  }\r\n});\r\n\r\nuserRouter.get(\"/user/connections\", userAuth, async (req, res) => {\r\n  try {\r\n    const loggedInUser = req.user;\r\n\r\n    const connectionRequests = await ConnectionRequest.find({\r\n      $or: [\r\n        { toUserId: loggedInUser._id, status: \"accepted\" },\r\n        { fromUserId: loggedInUser._id, status: \"accepted\" },\r\n      ],\r\n    }).populate(\"fromUserId\", USER_SAFE_DATA).populate(\"toUserId\", USER_SAFE_DATA);\r\n\r\n    const data = connectionRequests.map((row) => {\r\n      if (row.fromUserId._id.toString() === loggedInUser._id.toString()) {\r\n        return row.toUserId;\r\n      }\r\n      return row.fromUserId;\r\n    });\r\n\r\n    res.json({ data });\r\n  } catch (err) {\r\n    res.status(400).send({ message: err.message });\r\n  }\r\n});\r\n\r\nuserRouter.get(\"/feed\",userAuth,async(req,res)=>{\r\n    try{\r\n        const loggedInUser=req.user;\r\n        const page=parseInt(req.query.page) || 1;\r\n        let limit=parseInt(req.query.limit) ||10;\r\n        limit =limit >50?50:limit;\r\n\r\n        const skip=(page-1)*limit;\r\n\r\n        const connectionRequests=await ConnectionRequest.find({\r\n            $or :[\r\n                {toUserId:loggedInUser._id},\r\n                {fromUserId:loggedInUser._id},\r\n\r\n            ]\r\n        }).select(\"fromUserId toUserId\");\r\n\r\n        const hideUsersFromFeed=new Set();\r\n        connectionRequests.forEach(req => {\r\n            hideUsersFromFeed.add(req.fromUserId);\r\n            hideUsersFromFeed.add(req.toUserId);\r\n        });\r\n\r\n        const users=await User.find({\r\n           $and:[\r\n            {_id:{$nin: Array.from(hideUsersFromFeed)}},\r\n            {_id:{$ne: loggedInUser._id}}\r\n           ],\r\n        }).select(USER_SAFE_DATA)\r\n        .skip(skip)\r\n        .limit(limit)\r\n\r\n        res.json({data:users});\r\n\r\n    }catch(err){\r\n        res.status(400).send(\"ERROR\"+err.message);\r\n    }\r\n})\r\nmodule.exports = userRouter;"],"file":"user.dev.js"}