{"version":3,"sources":["auth.js"],"names":["express","require","authRouter","Router","bcrypt","post","req","res","_req$body","firstName","lastName","emailId","password","validatePass","user","regeneratorRuntime","async","_context","prev","next","validationDatabase","body","User","awrap","findOne","sent","abrupt","status","send","hash","console","log","save","runValidators","t0","code","existingUser","message","stop","_req$body2","token","_context2","Error","Date","now","error","_context3","cookie","expires","err","module","exports"],"mappings":"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","file":"auth.min.js","sourcesContent":["const express=require(\"express\");\r\nconst authRouter=express.Router();\r\nconst {validationDatabase}=require(\"../utils/validation\")\r\nconst bcrypt=require(\"bcrypt\");\r\nconst User = require(\"../models/user\");\r\n\r\nauthRouter.post(\"/signup\", async (req, res) => {\r\n//validate user \r\nvalidationDatabase(req);\r\n\r\n//encrypt password\r\nconst{firstName,lastName,emailId,password}=req.body;\r\n  const existingUser = await User.findOne({ emailId });\r\n    if (existingUser) {\r\n      return res.status(400).send(\"Email already exists\");\r\n    }\r\nconst validatePass=await bcrypt.hash(password,10);\r\nconsole.log(validatePass);\r\n  //   Creating a new instance of the User model\r\n  const user = new User({\r\n    firstName,\r\n    lastName,\r\n    password:validatePass,\r\n    emailId\r\n  });\r\n\r\n  try {\r\n    await user.save();\r\n    runValidators=true;\r\n    res.send(\"User Added successfully!\");\r\n  } catch (err) {\r\nif (err.code === 11000) {\r\n      return res.status(400).send(\"Email already exists\");\r\n    }\r\n    res.status(400).send(\"Error saving user: \" + err.message);\r\n  }\r\n});\r\nauthRouter.post(\"/login\",async (req,res)=>{\r\nconst {emailId,password}=req.body;\r\ntry{\r\nconst user=await User.findOne({emailId:emailId});\r\nif(!user){\r\n    throw new Error(\"Invalid Credentials\")\r\n}\r\n\r\nconst isPasswordValid=await user.validatePassword(password);\r\nif(isPasswordValid){\r\n    //create a jwt token\r\n    const token =await user.getJWT();\r\n    //add token to the cookie and send back the response\r\n    res.cookie(\"token\",token,{expires:new Date(Date.now()+ 8* 3600000)});\r\n    res.send(\"Login Successfull..\")\r\n}else{\r\n    throw new error(\"Invalid Credentials\")\r\n}\r\n}catch(err){\r\n    res.status(400).send(\"invalid Credentials \"+ err.message);\r\n}\r\n\r\n});\r\n\r\nauthRouter.post(\"/logout\",async (req,res)=>{\r\n    try{\r\n    res.cookie(\"token\",\"\",{\r\n        expires:new Date(Date.now()),\r\n    });\r\n    res.status(200).send(\"Logout successful\");\r\n}catch(err){\r\n    res.status(400).send(\"logout failed\");\r\n}\r\n})\r\n\r\nmodule.exports=authRouter;\r\n"]}