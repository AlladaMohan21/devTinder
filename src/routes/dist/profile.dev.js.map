{"version":3,"sources":["profile.js"],"names":["express","require","profileRouter","Router","userAuth","validateEditProfileData","bcrypt","get","req","res","userId","user","send","err","status","patch","Error","loggedInUser","Object","keys","body","forEach","key","save","json","message","firstName","data","password","hash","hashedPassword","console","log","module","exports"],"mappings":";;AAAA,IAAMA,OAAO,GAACC,OAAO,CAAC,SAAD,CAArB;;AACA,IAAMC,aAAa,GAACF,OAAO,CAACG,MAAR,EAApB;;eACgBF,OAAO,CAAC,qBAAD,C;IAAjBG,Q,YAAAA,Q;;gBAC0BH,OAAO,CAAC,qBAAD,C;IAAhCI,uB,aAAAA,uB;;AACP,IAAMC,MAAM,GAAGL,OAAO,CAAC,QAAD,CAAtB;;AAIAC,aAAa,CAACK,GAAd,CAAkB,eAAlB,EAAkCH,QAAlC,EAA2C,iBAAOI,GAAP,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAC3C,cAAG;AACGC,YAAAA,MADH,GACUF,GAAG,CAACG,IADd;AAEHF,YAAAA,GAAG,CAACG,IAAJ,CAASF,MAAT;AACC,WAHD,CAGC,OAAOG,GAAP,EAAY;AACTJ,YAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBF,IAAhB,CAAqB,uBAArB;AACD;;AANwC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA3C;AASAV,aAAa,CAACa,KAAd,CAAoB,eAApB,EAAoCX,QAApC,EAA6C,kBAAOI,GAAP,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,cAGpCJ,uBAAuB,CAACG,GAAD,CAHa;AAAA;AAAA;AAAA;;AAAA,gBAI/B,IAAIQ,KAAJ,CAAU,sBAAV,CAJ+B;;AAAA;AAOlCC,UAAAA,YAPkC,GAOrBT,GAAG,CAACG,IAPiB;AAS7CO,UAAAA,MAAM,CAACC,IAAP,CAAYX,GAAG,CAACY,IAAhB,EAAsBC,OAAtB,CAA8B,UAACC,GAAD;AAAA,mBAAQL,YAAY,CAACK,GAAD,CAAZ,GAAkBd,GAAG,CAACY,IAAJ,CAASE,GAAT,CAA1B;AAAA,WAA9B;AAT6C;AAAA,0CAUvCL,YAAY,CAACM,IAAb,EAVuC;;AAAA;AAY7Cd,UAAAA,GAAG,CAACe,IAAJ,CAAS;AAACC,YAAAA,OAAO,YAAIR,YAAY,CAACS,SAAjB,uCAAR;AACTC,YAAAA,IAAI,EAACV;AADI,WAAT;AAZ6C;AAAA;;AAAA;AAAA;AAAA;AAe7CR,UAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBF,IAAhB,CAAqB,YAAW,aAAIa,OAApC;;AAf6C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA7C;AAmBAvB,aAAa,CAACa,KAAd,CAAoB,yBAApB,EAA+CX,QAA/C,EAAyD,kBAAOI,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAE7CmB,UAAAA,QAF6C,GAEhCpB,GAAG,CAACY,IAF4B,CAE7CQ,QAF6C;AAG/CX,UAAAA,YAH+C,GAGhCT,GAAG,CAACG,IAH4B,EAKrD;;AALqD;AAAA,0CAMxBL,MAAM,CAACuB,IAAP,CAAYD,QAAZ,EAAsB,EAAtB,CANwB;;AAAA;AAM/CE,UAAAA,cAN+C;AAOrDC,UAAAA,OAAO,CAACC,GAAR,CAAYF,cAAZ;AAEAb,UAAAA,YAAY,CAACW,QAAb,GAAwBE,cAAxB;AATqD;AAAA,0CAU/Cb,YAAY,CAACM,IAAb,EAV+C;;AAAA;AAYrDd,UAAAA,GAAG,CAACG,IAAJ,CAAS,+BAAT;AAZqD;AAAA;;AAAA;AAAA;AAAA;AAcrDH,UAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBF,IAAhB,CAAqB,YAAY,aAAIa,OAArC;;AAdqD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAzD;AAkBAQ,MAAM,CAACC,OAAP,GAAehC,aAAf","sourcesContent":["const express=require(\"express\");\r\nconst profileRouter=express.Router();\r\nconst{userAuth}=require(\"../middlewares/auth\")\r\nconst {validateEditProfileData}=require(\"../utils/validation\")\r\nconst bcrypt = require(\"bcrypt\");\r\n\r\n\r\n\r\nprofileRouter.get(\"/profile/view\",userAuth,async (req,res)=>{\r\ntry{\r\nconst userId=req.user; \r\nres.send(userId);\r\n}catch (err) {\r\n    res.status(400).send(\"Something went wrong \");\r\n  }\r\n})\r\n\r\nprofileRouter.patch(\"/profile/edit\",userAuth,async (req,res)=>{\r\n    try{\r\n\r\n     if(!validateEditProfileData(req))   {\r\n        throw new Error(\"invalid Edit Request\");\r\n     }\r\n\r\n     const loggedInUser=req.user;\r\n\r\nObject.keys(req.body).forEach((key)=>(loggedInUser[key]=req.body[key]));\r\nawait loggedInUser.save();\r\n\r\nres.json({message:`${loggedInUser.firstName},Your profile updated successfully`,\r\ndata:loggedInUser})\r\n    }catch(err){\r\nres.status(400).send(\"ERROR: \"+ err.message);\r\n    }\r\n})\r\n\r\nprofileRouter.patch(\"/profile/forgotpassword\", userAuth, async (req, res) => {\r\n  try {\r\n    const { password } = req.body;\r\n    const loggedInUser = req.user;\r\n\r\n    // hash the new password\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n    console.log(hashedPassword)\r\n\r\n    loggedInUser.password = hashedPassword;\r\n    await loggedInUser.save();\r\n\r\n    res.send(\"Password updated successfully\");\r\n  } catch (err) {\r\n    res.status(400).send(\"ERROR: \" + err.message);\r\n  }\r\n});\r\n\r\nmodule.exports=profileRouter"],"file":"profile.dev.js"}