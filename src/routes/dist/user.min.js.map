{"version":3,"sources":["user.js"],"names":["express","require","userRouter","Router","ConnectionRequest","USER_SAFE_DATA","get","userAuth","req","res","loggedInUser","connectionRequests","regeneratorRuntime","async","_context","prev","next","user","awrap","find","_id","status","populate","sent","json","message","data","t0","statusCode","send","stop","_context2","toUserId","fromUserId","map","row","toString","page","limit","skip","hideUsersFromFeed","users","_context3","parseInt","query","select","Set","add","User","$and","$nin","Array","from","$ne","module","exports"],"mappings":"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","file":"user.min.js","sourcesContent":["const express = require(\"express\");\r\nconst userRouter = express.Router();\r\nconst User=require(\"../models/user\")\r\n\r\nconst { userAuth } = require(\"../middlewares/auth\");\r\nconst ConnectionRequest = require(\"../models/connectionRequest\");\r\n\r\nconst USER_SAFE_DATA = \"firstName lastName photoUrl age gender about skills\";\r\n\r\n// Get all the pending connection request for the loggedIn user\r\nuserRouter.get(\"/user/requests/received\", userAuth, async (req, res) => {\r\n  try {\r\n    const loggedInUser = req.user;\r\n\r\n    const connectionRequests = await ConnectionRequest.find({\r\n      toUserId: loggedInUser._id,\r\n      status: \"interested\",\r\n    })\r\n    .populate(\"fromUserId\", USER_SAFE_DATA);\r\n    res.json({\r\n      message: \"Data fetched successfully\",\r\n      data: connectionRequests,\r\n    });\r\n  } catch (err) {\r\n    req.statusCode(400).send(\"ERROR: \" + err.message);\r\n  }\r\n});\r\n\r\nuserRouter.get(\"/user/connections\", userAuth, async (req, res) => {\r\n  try {\r\n    const loggedInUser = req.user;\r\n\r\n    const connectionRequests = await ConnectionRequest.find({\r\n      $or: [\r\n        { toUserId: loggedInUser._id, status: \"accepted\" },\r\n        { fromUserId: loggedInUser._id, status: \"accepted\" },\r\n      ],\r\n    }).populate(\"fromUserId\", USER_SAFE_DATA).populate(\"toUserId\", USER_SAFE_DATA);\r\n\r\n    const data = connectionRequests.map((row) => {\r\n      if (row.fromUserId._id.toString() === loggedInUser._id.toString()) {\r\n        return row.toUserId;\r\n      }\r\n      return row.fromUserId;\r\n    });\r\n\r\n    res.json({ data });\r\n  } catch (err) {\r\n    res.status(400).send({ message: err.message });\r\n  }\r\n});\r\n\r\nuserRouter.get(\"/feed\",userAuth,async(req,res)=>{\r\n    try{\r\n        const loggedInUser=req.user;\r\n        const page=parseInt(req.query.page) || 1;\r\n        let limit=parseInt(req.query.limit) ||10;\r\n        limit =limit >50?50:limit;\r\n\r\n        const skip=(page-1)*limit;\r\n\r\n        const connectionRequests=await ConnectionRequest.find({\r\n            $or :[\r\n                {toUserId:loggedInUser._id},\r\n                {fromUserId:loggedInUser._id},\r\n\r\n            ]\r\n        }).select(\"fromUserId toUserId\");\r\n\r\n        const hideUsersFromFeed=new Set();\r\n        connectionRequests.forEach(req => {\r\n            hideUsersFromFeed.add(req.fromUserId);\r\n            hideUsersFromFeed.add(req.toUserId);\r\n        });\r\n\r\n        const users=await User.find({\r\n           $and:[\r\n            {_id:{$nin: Array.from(hideUsersFromFeed)}},\r\n            {_id:{$ne: loggedInUser._id}}\r\n           ],\r\n        }).select(USER_SAFE_DATA)\r\n        .skip(skip)\r\n        .limit(limit)\r\n\r\n        res.json({data:users});\r\n\r\n    }catch(err){\r\n        res.status(400).send(\"ERROR\"+err.message);\r\n    }\r\n})\r\nmodule.exports = userRouter;"]}